AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Backend API for TaskVision

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Environment name for resource naming

Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']
  TableExists: !Equals [!Ref 'AWS::NoValue', !GetAtt TaskVisionTable, 'TableName']

Resources:
  TaskVisionApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'taskvision-${Environment}-api'
      EndpointConfiguration:
        Types:
          - REGIONAL

  TaskVisionApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref TaskVisionApi
      StageName: !Ref Environment
      DeploymentId: !Ref TaskVisionApiDeployment

  TaskVisionApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiEvent
    Properties:
      RestApiId: !Ref TaskVisionApi

  TaskVisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: src/lambda.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !If 
            - TableExists
            - !GetAtt TaskVisionTable.TableName
            - !Sub 'taskvision-${Environment}-table'
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !If 
              - TableExists
              - !GetAtt TaskVisionTable.TableName
              - !Sub 'taskvision-${Environment}-table'
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: ANY

  TaskVisionTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub 'taskvision-${Environment}-table'
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'taskvision-${Environment}-frontend-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/'
  FrontendBucket:
    Description: S3 bucket for frontend hosting
    Value: !Ref S3Bucket
  FrontendWebsiteURL:
    Description: URL of the frontend website
    Value: !Sub 'http://${S3Bucket}.s3-website-${AWS::Region}.amazonaws.com' 