AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TaskVision backend - deploys Lambda + API Gateway with proper CORS and DynamoDB access

# Deploying fresh stack after cleanup
Globals:
  Function:
    Timeout: 10
    Runtime: nodejs18.x
    MemorySize: 128
    Architectures:
      - x86_64
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName
        CLIENT_ORIGIN_URL: !Ref ClientOriginUrl
        AUTH0_DOMAIN: !Ref Auth0Domain
        AUTH0_AUDIENCE: !Ref Auth0Audience
        VERSION: !Ref Version

Parameters:
  ClientOriginUrl:
    Type: String
    Description: The URL of the frontend application
  Auth0Domain:
    Type: String
    Description: The Auth0 domain
  Auth0Audience:
    Type: String
    Description: The Auth0 audience
  TableName:
    Type: String
    Description: The name of the DynamoDB table
  Version:
    Type: String
    Description: Version of the deployment
    Default: latest

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "GET,POST,PUT,DELETE,OPTIONS"
        AllowHeaders: "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Requested-With"
        AllowOrigin: !Ref ClientOriginUrl
        AllowCredentials: true
        MaxAge: "86400"

  TaskVisionFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}'

  TaskVisionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "taskvision-backend-${Version}"
      CodeUri: ./
      Handler: lambda.main
      Role: !GetAtt TaskVisionFunctionRole.Arn
      Tags:
        Version: !Ref Version
      Events:
        ProxyApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: ANY
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/lambda.ts
        Minify: true
        Target: es2020
        Sourcemap: true
        External:
          - aws-sdk

Outputs:
  ApiUrl:
    Description: API Gateway endpoint (default)
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  FunctionName:
    Description: Name of Lambda function
    Value: !Ref TaskVisionFunction
  FunctionRole:
    Description: Lambda function role ARN
    Value: !GetAtt TaskVisionFunctionRole.Arn
