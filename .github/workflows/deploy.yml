name: Deploy Backend (Dev)

on:
  push:
    branches: [main, dev]
    paths:
      - '**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev or prod)'
        required: true
        default: dev
        type: choice
        options: [dev, prod]

jobs:
  deploy:
    name: Deploy to AWS SAM (Dev)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install backend dependencies
        run: npm ci
        working-directory: .
      - name: Build SAM application
        run: sam build
        working-directory: .
      - name: Set environment name and prefixes
        id: setenv
        shell: bash
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "env_name=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "env_name=prod" >> $GITHUB_OUTPUT
          else
            echo "env_name=dev" >> $GITHUB_OUTPUT
          fi

          if [[ "${{ github.event.inputs.environment }}" == "prod" || "${{ github.ref_name }}" == "main" ]]; then
            echo "prefix=" >> $GITHUB_OUTPUT
            echo "apiprefix=api." >> $GITHUB_OUTPUT
          else
            echo "prefix=dev." >> $GITHUB_OUTPUT
            echo "apiprefix=dev-api." >> $GITHUB_OUTPUT
          fi
      - name: Check required secrets
        run: |
          if [[ -z "${{ secrets.TABLE_NAME }}" ]]; then
            echo "::error::TABLE_NAME secret is not set in GitHub repository"
            exit 1
          fi
          if [[ -z "${{ secrets.DOMAIN_NAME }}" ]]; then
            echo "::error::DOMAIN_NAME secret is not set in GitHub repository"
            exit 1
          fi
          if [[ -z "${{ secrets.CERTIFICATE_ARN }}" ]]; then
            echo "::error::CERTIFICATE_ARN secret is not set in GitHub repository"
            exit 1
          fi
      - name: Check and delete ROLLBACK_COMPLETE stack
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name taskvision-${{ steps.setenv.outputs.env_name }}-backend --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "STACK_NOT_FOUND")
          if [[ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting stack..."
            aws cloudformation delete-stack --stack-name taskvision-${{ steps.setenv.outputs.env_name }}-backend
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name taskvision-${{ steps.setenv.outputs.env_name }}-backend
          fi
      - name: Deploy to AWS
        run: |
          sam deploy \
            --stack-name taskvision-${{ steps.setenv.outputs.env_name }}-backend \
            --region ${{ secrets.AWS_REGION }} \
            --capabilities CAPABILITY_IAM \
            --resolve-s3 \
            --force-upload \
            --s3-prefix taskvision-${{ steps.setenv.outputs.env_name }} \
            --parameter-overrides \
              Environment=${{ secrets.ENVIRONMENT }} \
              ClientOriginUrl=https://${{ steps.setenv.outputs.prefix }}${{ secrets.DOMAIN_NAME }} \
              TableName=${{ secrets.TABLE_NAME }} \
              CustomDomainName=${{ secrets.CUSTOM_DOMAIN_NAME }} \
              CertificateArn=${{ secrets.CERTIFICATE_ARN }}
        working-directory: .